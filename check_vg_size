#!/bin/bash
#check_vg_size
#set -x 
# Plugin for Nagios
# Written by M. Koettenstorfer (mko@lihas.de)
# Some additions by J. Schoepfer (jsc@lihas.de)
# Last Modified: 2008-11-06
#
# Description:
#
# This plugin will check howmany space in volume groups is free

# Don't change anything below here

# Nagios return codes
STATE_OK=0
STATE_WARNING=1
STATE_CRITICAL=2
STATE_UNKNOWN=3
STATE_DEPENDENT=4

# realsize=`ls -alh $1  | awk '{ print $5}'`
# realsize_with_file=`ls -alh $file | awk '{ print $5,$9}'`
PROGNAME=$(basename $0)

########################################################################
### DEFINE FUNCTIONS
########################################################################

print_usage() {
	echo "Usage: $PROGNAME  -w <min size warning level in gb> -c <min size critical level in gb> -v volumegroupname"
	echo ""
}

print_help() {
	print_usage
	echo ""
	echo "This plugin will check how many space in volume groups is free"
	echo "usage: "
	exit $STATE_UNKNOWN
}

exitstatus=$STATE_UNKNOWN #default
	
checkArgValidity () {
# Check arguments for validity
	if [[ -z $critlevel || -z $warnlevel ]] # Did we get warn and crit values?
	then    
	        echo "You must specify a warning and critical level"
		print_usage
	        exitstatus=$STATE_UNKNOWN
	        exit $exitstatus 
	elif [ $warnlevel -le $critlevel ] # Do the warn/crit values make sense?
	then
		echo "CRITICAL value of $critlevel GB is less than WARNING level of $warnlevel GB"
		print_usage
		exitstatus=$STATE_UNKNOWN
		exit $exitstatus
	fi
}

#Does volume group actually exist?
volumeGroupExists () {
	VGValid=$(vgdisplay 2>/dev/null | grep "$volumegroup" | wc -l )
	
	if [[  -z "$volumegroup" ||  $VGValid = 0 ]]
	then
		echo "Volumegroup $volumegroup wasn't valid or wasn't specified"
		echo "with \"-v Volumegroup\", bye."
		return 0
	else
		#The volume group exists
		return 1 
	fi
}

getColumnNoByName () {
        columnName=$1
        result=$(vgs 2>/dev/null | head -n1 | awk -v name=$columnName '
                BEGIN{}
                        { for(i=1;i<=NF;i++){
                              if ($i ~ name)
                                  {print i } }
                        }')

        echo $result
}

getSizesOfVolume () {
	volumeName="$1"
	#Check the actual sizes
	cn=$(getColumnNoByName "VFree")
	freespace=$(vgs 2>/dev/null | grep $volumeName | awk -v n=$cn '{print $n}' | sed -e 's/.$//')
	postfix=$(vgs 2>/dev/null | grep $volumeName | awk -v n=$cn '{print $n}'| sed -e 's/^.*\(.\)$/\1/')
	if [[ $postfix == T ]]
	then 
		freespace=$(echo "$freespace * 1000" | bc | cut -d'.' -f1 )
	
	else
		freespace=$(echo $freespace| cut -d'.' -f1)
	fi
}

getSizes () {
	#Check the actual sizes
	freespace=$(/sbin/vgdisplay "$volumegroup" 2>/dev/null  | head -n19 | grep Free | cut -d'/' -f3 | cut -d' ' -f2 )
	postfix=$(/sbin/vgdisplay "$volumegroup" 2>/dev/null  | grep Free | cut -d'/' -f3 | cut -d' ' -f3 )
	if [[ $postfix == TB ]]
	then 
		freespace=$(echo "$freespace * 1000" | bc | cut -d'.' -f1 )
	
	else
		freespace=$(echo $freespace| cut -d'.' -f1)
	fi
}

setExitStatus () {
	if [ "$freespace" -le "$critlevel" ]
	then
		MESSAGE="VG $volumegroup CRITICAL Available space is $freespace GB"
		exitstatus=$STATE_CRITICAL
	elif [ "$freespace" -le "$warnlevel" ]
	then
		MESSAGE="VG $volumegroup WARNING Available space is $freespace GB"
		exitstatus=$STATE_WARNING
	else
		MESSAGE="VG $volumegroup OK Available space is $freespace GB"
		exitstatus=$STATE_OK
	fi 
}

########################################################################
### RUN PROGRAM
########################################################################


########################################################################
#Read input values
while getopts ":w:c:v:h:" opt ;do
	case $opt in
		h)
			print_help
			exit $exitstatus
			;;
		w)
			warnlevel=$OPTARG
			;;
		c)
			critlevel=$OPTARG
			;;
		v)
			volumegroup=$OPTARG
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			;;
	esac
done

checkArgValidity

volumeGroupExists
status=$?

if (( $status )); then
	getSizesOfVolume "$volumegroup" 
else
	exitstatus=$STATE_UNKNOWN
	exit $exitstatus
fi

setExitStatus


echo $MESSAGE
exit $exitstatus


